# Variables set by configure 
TENSORFLOW_DIR = @TENSORFLOWDIR@
TENSORFLOWLIBS = @TENSORFLOWLIBS@
FASTJET_DIR = @FASTJETDIR@
FASTJETLIBS = @FASTJETLIBS@
CXX      = @CXX@
LD       = @CXX@
CXXFLAGS = @CXXFLAGS@
LDFLAGS  = @LDFLAGS@

# Path to source directories
WDIR    = $(CMSSW_BASE)/src/Analyzer/Analyzer/test
CDIR    = obj
ODIR    = $(CMSSW_BASE)/src/Analyzer/Analyzer/test/$(CDIR)
IFWDIR  = $(CMSSW_BASE)/src/Framework/Framework/include
SFWDIR  = $(CMSSW_BASE)/src/Framework/Framework/src
IADIR   = $(CMSSW_BASE)/src/Analyzer/Analyzer/include
SADIR   = $(CMSSW_BASE)/src/Analyzer/Analyzer/src
INDIR   = $(CMSSW_BASE)/src/NTupleReader/include
SNDIR   = $(CMSSW_BASE)/src/NTupleReader/src
ITTDir  = $(CMSSW_BASE)/CfgParser/interface
STTDir  = $(CMSSW_BASE)/CfgParser/src
TDIR    = $(CMSSW_BASE)/src
TTDIR   = $(CMSSW_BASE)/src/TopTagger/
TTTDIR  = $(TTDIR)/TopTagger/test

# Enable the maximun warning
CXXFLAGS += -Wall -Wextra -Wpedantic

# Flags for generating auto dependancies
CXXDEPFLAGS = -MMD -MP

##########################################################
#Necessary includes and libraries, the order matters here!
##########################################################

# Top tagger libraries
LIBSTOPTAGGER += -L$(TTTDIR) -lTopTagger

# Include ROOT
INCLUDESDIRS  += $(shell root-config --cflags)

# ROOT libraries
LIBS          += $(shell root-config --glibs) -lGenVector

# Tensorflow includes and libraries
ifdef TENSORFLOW_DIR
	INCLUDESDIRS += -I$(TENSORFLOW_DIR)/include
	CXXFLAGS     += -DDOTENSORFLOW
	LIBS         += -L$(TENSORFLOW_DIR)/lib $(TENSORFLOWLIBS)
endif

# Fastjet includes and libraries
ifdef FASTJET_DIR
	INCLUDESDIRS += -I$(FASTJET_DIR)/include
	LIBS         += -L$(FASTJET_DIR)/lib $(FASTJETLIBS)
endif

# Include our code
INCLUDESDIRS += -I$(TDIR) -I$(IFWDIR) -I$(SFWDIR) -I$(IADIR) -I$(SADIR) -I$(INDIR) -I$(SNDIR) -I$(ITTDir) -I$(STTDir)

PROGRAMS = $(ODIR)/rootdict.cc MyAnalysis

ANALYZERS  = $(ODIR)/MiniTupleMaker.o $(ODIR)/CalculateBTagSF.o $(ODIR)/BTagCalibrationStandalone.o $(ODIR)/MakeMiniTree.o $(ODIR)/AnalyzeLepTrigger.o $(ODIR)/AnalyzeTest.o 
ANALYZERS += $(ODIR)/MakeMiniTree.o $(ODIR)/MiniTupleMaker.o $(ODIR)/CalculateBTagSF.o $(ODIR)/AnalyzeBTagSF.o $(ODIR)/BTagCalibrationStandalone.o 
ANALYZERS += $(ODIR)/AnalyzeXsec.o $(ODIR)/MakeNNVariables.o $(ODIR)/AnalyzeDoubleDisCo.o $(ODIR)/AnalyzeGenStop.o
ANALYZERS += $(ODIR)/Semra_Analyzer.o $(ODIR)/ResolvedTopTagger_Analyzer.o $(ODIR)/WholeTopTagger_Analyzer.o $(ODIR)/HEM_Analyzer.o $(ODIR)/TopTaggerSF_Analyzer.o $(ODIR)/ISRJets_Analyzer.o $(ODIR)/HadTriggers_Analyzer.o $(ODIR)/TwoLepAnalyzer.o $(ODIR)/AnalyzeDataMC.o 

HELPERS  = $(ODIR)/NTupleReader.o $(ODIR)/Utility.o $(ODIR)/samples.o $(ODIR)/EventShapeVariables.o $(ODIR)/SetUpTopTagger.o $(ODIR)/NTRException.o $(ODIR)/histio.o 
HELPERS += $(ODIR)/Make2LInputTrees.o $(ODIR)/Hemispheres.o $(ODIR)/StealthHemispheres.o 

all: mkobj sampPyWrap $(PROGRAMS)

mkobj:
	@mkdir -p $(ODIR)

# Code to compile shared library to link samples to python
sampPyWrap: $(ODIR)/samplesModule.so

$(ODIR)/samplesModule.so: $(ODIR)/samplesPyWrap.o $(ODIR)/samplesModulePyWrap.o
	$(CXX) -shared -o $@ $^

$(ODIR)/samplesPyWrap.o: $(SFWDIR)/samples.cc $(IFWDIR)/samples.h 
	$(CXX) --std=c++11 -c -fPIC -o $@ $<

$(ODIR)/samplesModulePyWrap.o: $(SFWDIR)/samplesModule.cc
	$(CXX) --std=c++11 -c -fPIC -o $@ $<

$(ODIR)/rootdict.cc : $(WDIR)/rootdict.h 
	rootcint -f $@ $^ -inlineInputHeade $(shell root-config --cflags) -lGenVector
	mv $(ODIR)/rootdict_rdict.pcm $(WDIR)

SRC_EXT = cpp c cc C
SRC_DIR = $(SFWDIR) $(SADIR) $(SNDIR) $(STTDir) $(WDIR) $(ODIR)
define compile_rule
$$(ODIR)/%.o : $1/%.$2
	$$(CXX) $$(CXXFLAGS) $$(CXXDEPFLAGS)  $$(INCLUDESDIRS) -o $$@ -c $$<
endef    
$(foreach DIR,$(SRC_DIR),$(foreach EXT,$(SRC_EXT),$(eval $(call compile_rule,$(DIR),$(EXT)))))

# Make executables
MyAnalysis: $(ODIR)/MyAnalysis.o $(HELPERS) $(ANALYZERS) $(ODIR)/rootdict.o
	$(LD) $^ $(LIBSTOPTAGGER) $(LIBS) -o $@

# Remove obj directory 
clean:
	@rm -rf $(ODIR)/*.o $(ODIR)/*.so $(ODIR)/*.d $(PROGRAMS) core $(ODIR) $(WDIR)/rootdict_rdict.pcm

-include $(ODIR)/*.d
